{"version":3,"sources":["components/MessageForm.js","components/MyMessage.js","components/TheirMessage.js","components/ChatFeed.js","components/LoginForm.js","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","backgroundColor","color","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","console","log","backgroundImage","avater","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","avatar","title","keys","Object","key","lastMessageKey","width","listStyle","margin","renderMessages","height","LoginForm","setUsername","password","setPassword","isLoading","setIsLoading","error","setError","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","e","required","textAlign","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"kPAqDeA,MAjDf,SAAqBC,GACjB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACQC,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,MAEVC,EAAe,SAACC,GAClBA,EAAMC,iBAEN,IAAMC,EAAOP,EAAMQ,OACfD,EAAKE,OAAS,IACdC,YAAYP,EAAOD,EAAQ,CAAEK,SAC7BN,EAAS,MAWjB,OACI,uBAAMU,UAAU,eAAeC,SAAUR,EAAzC,UACI,uBACIO,UAAU,gBACVE,YAAY,iBACZC,SAZS,SAACT,GAClBJ,EAASI,EAAMU,OAAOf,OACtBgB,YAASlB,EAAOI,IAWRU,SAAUR,EACVJ,MAAOA,IAEX,uBAAOiB,QAAQ,gBAAf,SACI,sBAAMN,UAAU,eAAhB,SACI,cAACO,EAAA,EAAD,CAAiBP,UAAU,qBAGnC,uBACIQ,KAAK,OACLC,UAAU,EACVC,GAAG,gBACHC,MAAO,CAAEC,QAAS,QAClBT,SAtBS,SAACT,GAClBK,YAAYP,EAAOD,EAAQ,CAAEsB,MAAOnB,EAAMU,OAAOS,MAAOjB,KAAM,QAuB1D,wBAAQY,KAAK,SAASR,UAAU,cAAhC,SACI,cAACc,EAAA,EAAD,CAAcd,UAAU,oBC3BzBe,MAlBf,YAAiC,IAAD,EAAXC,EAAW,EAAXA,QACjB,OAAW,OAAPA,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBnB,QAAS,EAE3B,qBACIoB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJpB,UAAU,gBACVW,MAAO,CAAEU,MAAO,WAKxB,qBAAKrB,UAAU,UAAUW,MAAO,CAAEU,MAAO,QAASC,YAAa,OAAQC,gBAAiB,UAAWC,MAAO,SAA1G,SACKR,EAAQpB,QCaN6B,MA1Bf,YAAiD,IAAD,IAAxBC,EAAwB,EAAxBA,YAAaV,EAAW,EAAXA,QAC3BW,GAAwBD,GAAeA,EAAYE,OAAOC,WAAab,EAAQY,OAAOC,SAE5F,OADAC,QAAQC,IAAI,aAER,sBAAK/B,UAAU,cAAf,UACK2B,GACG,qBACI3B,UAAU,iBACVW,MAAO,CAAEqB,gBAAgB,OAAD,cAAShB,QAAT,IAASA,GAAT,UAASA,EAASY,cAAlB,aAAS,EAAiBK,OAA1B,SAGxB,OAAPjB,QAAO,IAAPA,GAAA,UAAAA,EAASC,mBAAT,eAAsBnB,QAAS,EAC1B,qBACEoB,IAAKF,EAAQC,YAAY,GAAGE,KAC5BC,IAAI,qBACJpB,UAAU,gBACVW,MAAO,CAAEuB,WAAYP,EAAuB,MAAQ,UAEtD,qBAAK3B,UAAU,UAAUW,MAAO,CAAEU,MAAO,OAAQa,WAAYP,EAAuB,MAAQ,OAAQJ,gBAAiB,WAArH,SACGP,EAAQpB,WCyCduC,EA1DE,SAAChD,GACd,IAAQiD,EAA0CjD,EAA1CiD,MAAOC,EAAmClD,EAAnCkD,WAAYC,EAAuBnD,EAAvBmD,SAAUC,EAAapD,EAAboD,SAE/BC,EAAOJ,GAASA,EAAMC,GAC5BP,QAAQC,IAAIS,EAAMF,EAAUC,GAE5B,IAAME,EAAqB,SAACzB,EAAS0B,GAAV,OACvBF,EAAKG,OAAOC,KAAI,SAACC,EAAQC,GAAT,aAAmBD,EAAOE,YAAc/B,EAAQN,IAC5D,qBAEIV,UAAU,eACVW,MAAO,CACHU,MAAOqB,EAAc,QAAU,OAC/BV,gBAAgB,OAAD,cAASa,QAAT,IAASA,GAAT,UAASA,EAAQA,cAAjB,aAAS,EAAgBG,OAAzB,OALvB,cACgBF,QAkCxB,OAAKN,EACE,sBAAKxC,UAAU,YAAf,UACH,sBAAKA,UAAU,uBAAf,UACI,qBAAKA,UAAU,aAAf,SAA6BwC,EAAKS,QAClC,qBAAKjD,UAAU,gBAAf,SACKwC,EAAKG,OAAOC,KAAI,SAAAC,GAAM,gBAAOA,EAAOA,OAAOhB,SAArB,eA/BZ,WACnB,IAAMqB,EAAOC,OAAOD,KAAKX,GAsBzB,OArBAT,QAAQC,IAAImB,GAEIA,EAAKN,KAAI,SAACQ,EAAKN,GAC3B,IAAM9B,EAAUuB,EAASa,GACnBC,EAAiBP,EAAmBM,EAAIN,EAAQ,GAChDJ,EAAcJ,IAAatB,EAAQY,OAAOC,SAEhD,OACI,qBAAmBlB,MAAO,CAAE2C,MAAO,OAAQC,UAAW,QAAtD,UACI,qBAAKvD,UAAU,gBAAf,SACK0C,EACK,cAAC,EAAD,CAAW1B,QAASA,IACpB,cAAC,EAAD,CAAcA,QAASA,EAASU,YAAaa,EAASc,OAGhE,qBAAKrD,UAAU,gBAAgBW,MAAO,CAAE6C,OAAQd,EAAc,qBAAuB,sBAArF,SACKD,EAAmBzB,EAAS0B,OARrC,UAAYU,OAwBnBK,GACD,qBAAK9C,MAAO,CAAE+C,OAAQ,WACtB,qBAAK1D,UAAU,yBAAf,SACI,cAAC,EAAD,2BAAiBb,GAAjB,IAAwBI,OAAQ8C,UAXtB,yC,2CC7CP,SAASsB,IACpB,MAAgCvE,mBAAS,IAAzC,mBAAOyC,EAAP,KAAiB+B,EAAjB,KACA,EAAgCxE,mBAAS,IAAzC,mBAAOyE,EAAP,KAAiBC,EAAjB,KACA,EAAkC1E,oBAAS,GAA3C,mBAAO2E,EAAP,KAAkBC,EAAlB,KACA,EAA0B5E,mBAAS,IAAnC,mBAAO6E,EAAP,KAAcC,EAAd,KAEMzE,EAAY,uCAAG,WAAOC,GAAP,eAAAyE,EAAA,6DACjBzE,EAAMC,iBAEAyE,EAAa,CACf,aAAc,uCACd,YAAavC,EACb,cAAegC,GANF,SASbG,GAAa,GATA,SAUPK,IAAMC,IAAI,kCAAmC,CAAEC,QAASH,IAVjD,OAWbI,aAAaC,QAAQ,WAAY5C,GACjC2C,aAAaC,QAAQ,WAAYZ,GAEjCa,OAAOC,SAASC,SAdH,kDAgBbZ,GAAa,GACbJ,EAAY,IACZE,EAAY,IACZI,EAAS,gCAnBI,0DAAH,sDAsBlB,OACI,qBAAKlE,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,kDACA,uBAAMC,SAAUR,EAAhB,UACI,uBACIe,KAAK,OACLnB,MAAOwC,EACP7B,UAAU,QACVG,SAAU,SAAC0E,GAAD,OAAOjB,EAAYiB,EAAEzE,OAAOf,QACtCa,YAAY,WACZ4E,UAAQ,IAEZ,uBACItE,KAAK,OACLnB,MAAOwE,EACP7D,UAAU,QACVG,SAAU,SAAC0E,GAAD,OAAOf,EAAYe,EAAEzE,OAAOf,QACtCyF,UAAQ,EACR5E,YAAY,aAEhB,qBAAKS,MAAO,CAAEoE,UAAW,UAAzB,SACI,yBAAQ/E,UAAU,SAASQ,KAAK,SAAhC,WACMuD,GAAa,kDACdA,GAAa,qBAAM/D,UAAU,iBAGtC,oBAAIA,UAAU,QAAd,SAAuBiE,Y,OCjD5B,SAASe,IACtB,OAAKR,aAAaS,QAAQ,YAIxB,cAAC,IAAD,CACEvB,OAAO,QACPwB,UAAU,uCACV5C,SAAUkC,aAAaS,QAAQ,YAC/BE,WAAYX,aAAaS,QAAQ,YACjCG,eAAgB,SAACC,GAAD,OAAkB,cAAC,EAAD,eAAcA,OAR3C,cAAC1B,EAAD,ICLX2B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ed013b79.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport { sendMessage, isTyping } from 'react-chat-engine'\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons'\r\n\r\nfunction MessageForm(props) {\r\n    const [value, setValue] = useState(\"\");\r\n    const { chatId, creds } = props;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n        if (text.length > 0) {\r\n            sendMessage(creds, chatId, { text });\r\n            setValue(\"\");\r\n        }\r\n\r\n    }\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value)\r\n        isTyping(props, chatId)\r\n    }\r\n    const handleUpload = (event) => {\r\n        sendMessage(creds, chatId, { files: event.target.files, text: \"\" })\r\n    }\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"message-input\"\r\n                placeholder=\"send a message\"\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n                value={value}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined className=\"picture-icon\" />\r\n                </span>\r\n            </label>\r\n            <input\r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{ display: \"none\" }}\r\n                onChange={handleUpload}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icon\" />\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MessageForm\r\n","import React from 'react'\r\n\r\nfunction MyMessage({ message }) {\r\n    if (message?.attachments?.length > 0) {\r\n        return (\r\n            <img\r\n                src={message.attachments[0].file}\r\n                alt=\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: \"right\" }}\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"message\" style={{ float: 'right', marginRight: '18px', backgroundColor: \"#3b2a50\", color: \"white\" }}>\r\n            {message.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyMessage\r\n","import React from 'react'\r\n\r\nfunction TheirMessage({ lastMessage, message }) {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n    console.log(\"HHHHHHHHH\");\r\n    return (\r\n        <div className=\"message-row\">\r\n            {isFirstMessageByUser && (\r\n                <div\r\n                    className=\"message-avatar\"\r\n                    style={{ backgroundImage: `url(${message?.sender?.avater})` }}\r\n                />\r\n            )}\r\n            {message?.attachments?.length > 0\r\n                ? <img\r\n                    src={message.attachments[0].file}\r\n                    alt=\"message-attachment\"\r\n                    className=\"message-image\"\r\n                    style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n                />\r\n                : <div className=\"message\" style={{ float: 'left', marginLeft: isFirstMessageByUser ? '4px' : '48px', backgroundColor: \"#cabcdc\" }}>\r\n                    {message.text}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage\r\n","import MessageForm from \"./MessageForm\";\r\nimport MyMessage from \"./MyMessage\";\r\nimport TheirMessage from \"./TheirMessage\";\r\n\r\nconst ChatFeed = (props) => {\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat];\r\n    console.log(chat, userName, messages);\r\n    //functions\r\n    const renderReadReceipts = (message, isMyMessage) =>\r\n        chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div\r\n                key={`read${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n            />\r\n        ))\r\n    const renderMessages = () => {\r\n        const keys = Object.keys(messages);\r\n        console.log(keys);\r\n\r\n        let _messages = keys.map((key, index) => {\r\n            const message = messages[key]; // get a message from messages\r\n            const lastMessageKey = index = 0 ? null : key[index - 1]; // get the last message before a the new messsage\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <li key={`${key}`} style={{ width: \"100%\", listStyle: \"none\" }}>\r\n                    <div className=\"message-block\">\r\n                        {isMyMessage\r\n                            ? <MyMessage message={message} />\r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />\r\n                        }\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ margin: isMyMessage ? \"auto 0px auto 18px\" : \"auto 68px auto 0px\" }}>\r\n                        {renderReadReceipts(message, isMyMessage)}\r\n                    </div>\r\n                </li>\r\n            )\r\n        })\r\n        return _messages\r\n    }\r\n\r\n    if (!chat) return <p>Loading</p>\r\n    return <div className=\"chat-feed\">\r\n        <div className=\"chat-title-container\">\r\n            <div className=\"chat-title\">{chat.title}</div>\r\n            <div className=\"chat-subtitle\">\r\n                {chat.people.map(person => `${person.person.username}   `)}\r\n            </div>\r\n        </div>\r\n        {renderMessages()}\r\n        <div style={{ height: '100px' }} />\r\n        <div className=\"message-form-container\">\r\n            <MessageForm {...props} chatId={activeChat} />\r\n        </div>\r\n    </div>;\r\n};\r\nexport default ChatFeed;","import { useState } from \"react\"\r\nimport axios from 'axios'\r\nexport default function LoginForm() {\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState('')\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        const authObject = {\r\n            'Project-ID': \"5714cd85-0446-47cd-84bd-3a90376c5330\",\r\n            'User-Name': username,\r\n            'User-Secret': password\r\n        }\r\n        try {\r\n            setIsLoading(true);\r\n            await axios.get(\"https://api.chatengine.io/chats\", { headers: authObject })\r\n            localStorage.setItem('username', username);\r\n            localStorage.setItem('password', password);\r\n\r\n            window.location.reload();\r\n        } catch (err) {\r\n            setIsLoading(false);\r\n            setUsername('');\r\n            setPassword('');\r\n            setError('Oops, incorrect credentials.');\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1>Chat Application</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={username}\r\n                        className=\"input\"\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                        placeholder=\"Username\"\r\n                        required\r\n                    />\r\n                    <input\r\n                        type=\"text\"\r\n                        value={password}\r\n                        className=\"input\"\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        required\r\n                        placeholder=\"Password\"\r\n                    />\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <button className=\"button\" type=\"submit\">\r\n                            {!isLoading && <span>Start Chatting</span>}\r\n                            {isLoading && < div className=\"spinner\" />}\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","//components\nimport { ChatEngine } from 'react-chat-engine';\nimport ChatFeed from './components/ChatFeed';\nimport LoginForm from './components/LoginForm';\n\n//styles\nimport './App.css';\n\nexport default function App() {\n  if (!localStorage.getItem('username'))\n    return <LoginForm />\n\n  return (\n    <ChatEngine\n      height=\"100vh\"\n      projectID=\"5714cd85-0446-47cd-84bd-3a90376c5330\"\n      userName={localStorage.getItem('username')}\n      userSecret={localStorage.getItem('password')}\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\n    />\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}